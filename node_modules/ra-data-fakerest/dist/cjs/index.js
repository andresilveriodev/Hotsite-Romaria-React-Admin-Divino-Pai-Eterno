"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var fakerest_1 = require("fakerest");
/* eslint-disable no-console */
function log(type, resource, params, response) {
    // @ts-ignore
    if (console.group) {
        // Better logging in Chrome
        console.groupCollapsed(type, resource, JSON.stringify(params));
        console.log(response);
        console.groupEnd();
    }
    else {
        console.log('FakeRest request ', type, resource, params);
        console.log('FakeRest response', response);
    }
}
function delayed(response, delay) {
    // If there is no delay, we return the value right away/
    // This saves a tick in unit tests.
    return delay
        ? new Promise(function (resolve) {
            setTimeout(function () { return resolve(response); }, delay);
        })
        : response;
}
/**
 * Respond to react-admin data queries using a local JavaScript object
 *
 * Useful for debugging and testing - do not use in production.
 *
 * @example
 *
 * import fakeDataProvider from 'ra-data-fakerest';
 * const dataProvider = fakeDataProvider({
 *   posts: [
 *     { id: 0, title: 'Hello, world!' },
 *     { id: 1, title: 'FooBar' },
 *   ],
 *   comments: [
 *     { id: 0, post_id: 0, author: 'John Doe', body: 'Sensational!' },
 *     { id: 1, post_id: 0, author: 'Jane Doe', body: 'I agree' },
 *   ],
 * })
 */
exports.default = (function (data, loggingEnabled, delay) {
    if (loggingEnabled === void 0) { loggingEnabled = false; }
    var database = new fakerest_1.Database({ data: data });
    if (typeof window !== 'undefined') {
        // give way to update data in the console
        window._database = database;
    }
    function getResponse(type, resource, params) {
        var _a;
        switch (type) {
            case 'getList': {
                var _b = params.pagination, page = _b.page, perPage = _b.perPage;
                var _c = params.sort, field = _c.field, order = _c.order;
                var query = {
                    sort: [field, order],
                    range: [(page - 1) * perPage, page * perPage - 1],
                    filter: params.filter,
                };
                return delayed({
                    data: database.getAll(resource, query),
                    total: database.getCount(resource, {
                        filter: params.filter,
                    }),
                }, delay);
            }
            case 'getOne':
                return delayed({
                    data: database.getOne(resource, params.id, __assign({}, params)),
                }, delay);
            case 'getMany':
                return delayed({
                    data: params.ids.map(function (id) { return database.getOne(resource, id); }, __assign({}, params)),
                }, delay);
            case 'getManyReference': {
                var _d = params.pagination, page = _d.page, perPage = _d.perPage;
                var _e = params.sort, field = _e.field, order = _e.order;
                var query = {
                    sort: [field, order],
                    range: [(page - 1) * perPage, page * perPage - 1],
                    filter: __assign(__assign({}, params.filter), (_a = {}, _a[params.target] = params.id, _a)),
                };
                return delayed({
                    data: database.getAll(resource, query),
                    total: database.getCount(resource, {
                        filter: query.filter,
                    }),
                }, delay);
            }
            case 'update':
                return delayed({
                    data: database.updateOne(resource, params.id, __assign({}, params.data)),
                }, delay);
            case 'updateMany':
                params.ids.forEach(function (id) {
                    return database.updateOne(resource, id, __assign({}, params.data));
                });
                return delayed({ data: params.ids }, delay);
            case 'create':
                return delayed({ data: database.addOne(resource, __assign({}, params.data)) }, delay);
            case 'delete':
                return delayed({ data: database.removeOne(resource, params.id) }, delay);
            case 'deleteMany':
                params.ids.forEach(function (id) { return database.removeOne(resource, id); });
                return delayed({ data: params.ids }, delay);
            default:
                return false;
        }
    }
    /**
     * @param {String} type One of the data Provider methods, e.g. 'getList'
     * @param {String} resource Name of the resource to fetch, e.g. 'posts'
     * @param {Object} params The data request params, depending on the type
     * @returns {Promise} The response
     */
    var handle = function (type, resource, params) { return __awaiter(void 0, void 0, void 0, function () {
        var collection, error, response, error_1, signal, paramsWithoutSignal;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    collection = database.getCollection(resource);
                    if (!collection && type !== 'create') {
                        error = new UndefinedResourceError("Undefined collection \"".concat(resource, "\""));
                        error.code = 1; // make that error detectable
                        throw error;
                    }
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, getResponse(type, resource, params)];
                case 2:
                    response = _a.sent();
                    return [3 /*break*/, 4];
                case 3:
                    error_1 = _a.sent();
                    console.error(error_1);
                    throw error_1;
                case 4:
                    if (loggingEnabled) {
                        signal = params.signal, paramsWithoutSignal = __rest(params, ["signal"]);
                        log(type, resource, paramsWithoutSignal, response);
                    }
                    return [2 /*return*/, response];
            }
        });
    }); };
    return {
        getList: function (resource, params) { return handle('getList', resource, params); },
        getOne: function (resource, params) { return handle('getOne', resource, params); },
        getMany: function (resource, params) { return handle('getMany', resource, params); },
        getManyReference: function (resource, params) {
            return handle('getManyReference', resource, params);
        },
        update: function (resource, params) { return handle('update', resource, params); },
        updateMany: function (resource, params) {
            return handle('updateMany', resource, params);
        },
        create: function (resource, params) { return handle('create', resource, params); },
        delete: function (resource, params) { return handle('delete', resource, params); },
        deleteMany: function (resource, params) {
            return handle('deleteMany', resource, params);
        },
    };
});
var UndefinedResourceError = /** @class */ (function (_super) {
    __extends(UndefinedResourceError, _super);
    function UndefinedResourceError() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return UndefinedResourceError;
}(Error));
//# sourceMappingURL=index.js.map